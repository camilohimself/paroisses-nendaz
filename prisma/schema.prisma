// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modèle pour les paroisses
model Parish {
  id          String   @id @default(uuid())
  name        String
  address     String
  phone       String?
  email       String?
  priest      String?
  description String?
  events      Event[]
  parishioners Parishioner[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Modèle pour les articles/actualités
model Article {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  image       String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modèle pour les catégories d'articles
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modèle pour les événements
model Event {
  id          String    @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String
  parish      Parish    @relation(fields: [parishId], references: [id])
  parishId    String
  type        EventType
  recurring   Boolean   @default(false)
  published   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modèle pour les paroissiens
model Parishioner {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  email       String?     @unique
  phone       String?
  address     String?
  birthDate   DateTime?
  parish      Parish      @relation(fields: [parishId], references: [id])
  parishId    String
  sacraments  Sacrament[]
  newsletter  Boolean     @default(false)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Modèle pour les sacrements
model Sacrament {
  id            String        @id @default(uuid())
  type          SacramentType
  date          DateTime
  location      String
  minister      String?       // Prêtre qui a célébré
  notes         String?
  parishioner   Parishioner   @relation(fields: [parishionerId], references: [id])
  parishionerId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Modèle pour les utilisateurs (admin/gestionnaires)
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  password  String    // Sera hashé
  role      UserRole  @default(EDITOR)
  active    Boolean   @default(true)
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Modèle pour les documents (feuilles d'annonces, bulletins)
model Document {
  id          String      @id @default(uuid())
  title       String
  filename    String
  originalName String
  mimeType    String
  size        Int
  type        DocumentType
  description String?
  published   Boolean     @default(true)
  downloadCount Int       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Modèle pour la newsletter
model NewsletterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle pour les réservations de salle
model Reservation {
  id          String            @id @default(uuid())
  name        String            // Nom du demandeur
  email       String
  phone       String?
  startDate   DateTime
  endDate     DateTime
  purpose     String            // But de la réservation
  status      ReservationStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// Énumérations
enum EventType {
  MASS
  BAPTISM
  WEDDING
  FUNERAL
  CONFESSION
  MEETING
  CELEBRATION
  OTHER
}

enum SacramentType {
  BAPTISM
  FIRST_COMMUNION
  CONFIRMATION
  MARRIAGE
  ANOINTING
  ORDINATION
}

enum UserRole {
  ADMIN
  EDITOR
  CONTRIBUTOR
}

enum DocumentType {
  ANNOUNCEMENT    // Feuilles d'annonces
  BULLETIN       // Bulletin paroissial
  FORM           // Formulaires
  OTHER
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}